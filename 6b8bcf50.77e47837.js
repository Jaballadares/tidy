(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{77:function(e,a,n){"use strict";n.r(a),n.d(a,"frontMatter",(function(){return r})),n.d(a,"metadata",(function(){return c})),n.d(a,"toc",(function(){return p})),n.d(a,"default",(function(){return i}));var t=n(3),l=n(7),o=(n(0),n(97)),r={title:"Pivot API",sidebar_label:"Pivot"},c={unversionedId:"api/pivot",id:"api/pivot",isDocsHomePage:!1,title:"Pivot API",description:"pivotLonger",source:"@site/docs/api/pivot.md",slug:"/api/pivot",permalink:"/tidy/docs/api/pivot",editUrl:"https://github.com/pbeshai/tidy/docs/api/pivot.md",version:"current",lastUpdatedBy:"ellemenno",lastUpdatedAt:1615058396,sidebar_label:"Pivot",sidebar:"docs",previous:{title:"Selectors API",permalink:"/tidy/docs/api/selectors"},next:{title:"Tidy Math API",permalink:"/tidy/docs/api/math"}},p=[{value:"pivotLonger",id:"pivotlonger",children:[{value:"Parameters",id:"parameters",children:[]},{value:"Usage",id:"usage",children:[]}]},{value:"pivotWider",id:"pivotwider",children:[{value:"Parameters",id:"parameters-1",children:[]},{value:"Usage",id:"usage-1",children:[]}]}],s={toc:p};function i(e){var a=e.components,n=Object(l.a)(e,["components"]);return Object(o.b)("wrapper",Object(t.a)({},s,n,{components:a,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"pivotlonger"},"pivotLonger"),Object(o.b)("p",null,"Lengthens data by increasing the number of rows (items) and decreasing the number of columns (keys) in a collection. The inverse transformation is ",Object(o.b)("a",Object(t.a)({parentName:"p"},{href:"#pivotwider"}),Object(o.b)("strong",{parentName:"a"},"pivotWider")),"."),Object(o.b)("p",null,"Note this functionality is similar to what is achieved with the tidyr function ",Object(o.b)("a",Object(t.a)({parentName:"p"},{href:"https://tidyr.tidyverse.org/reference/gather.html"}),"gather")," that has been superceded by ",Object(o.b)("a",Object(t.a)({parentName:"p"},{href:"https://tidyr.tidyverse.org/reference/pivot_longer.html"}),"pivot_longer"),"."),Object(o.b)("h3",{id:"parameters"},"Parameters"),Object(o.b)("h4",{id:"options"},Object(o.b)("inlineCode",{parentName:"h4"},"options")),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),"{\n  cols: string | string[] | Selector, /* keys in the items */\n  namesTo: string | string[];\n  namesSep: string = '_';\n  valuesTo: string | string[];\n}\n")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"cols"),": The list of keys to pivot to the longer format. Takes the same style as in ",Object(o.b)("a",Object(t.a)({parentName:"li"},{href:"/tidy/docs/api/tidy#selectkeys"}),Object(o.b)("strong",{parentName:"a"},"select::selectKeys"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"namesTo"),": Map the keys in the input to these output columns. If multiple values are provided via an array, the keys will be split per ",Object(o.b)("inlineCode",{parentName:"li"},"namesSep"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"valuesTo"),": Map the values in the input to these output columns. If multiple values are provided via an array, the keys will be split per ",Object(o.b)("inlineCode",{parentName:"li"},"namesSep")," expecting the name of the value output column as a prefix.")),Object(o.b)("h3",{id:"usage"},"Usage"),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"const data = [\n  { type: 'one', canada: 1, usa: 10, campbell: 4, brampton: 8 },\n  { type: 'two', brampton: 7, boston: 3, usa: 11 },\n  { type: 'three', canada: 20 },\n]\n\ntidy(\n  data,\n  pivotLonger({\n    cols: ['canada', 'usa', 'campbell', 'brampton', 'boston'],\n    namesTo: 'place',\n    valuesTo: 'val',\n  })\n)\n// output:\n[\n  { type: 'one',   place: 'canada',   val: 1 },\n  { type: 'one',   place: 'usa',      val: 10 },\n  { type: 'one',   place: 'campbell', val: 4 },\n  { type: 'one',   place: 'brampton', val: 8 },\n  { type: 'one',   place: 'boston',   val: undefined },\n  { type: 'two',   place: 'canada',   val: undefined },\n  { type: 'two',   place: 'usa',      val: 11 },\n  { type: 'two',   place: 'campbell', val: undefined },\n  { type: 'two',   place: 'brampton', val: 7 },\n  { type: 'two',   place: 'boston',   val: 3 },\n  { type: 'three', place: 'canada',   val: 20 },\n  { type: 'three', place: 'usa',      val: undefined },\n  { type: 'three', place: 'campbell', val: undefined },\n  { type: 'three', place: 'brampton', val: undefined },\n  { type: 'three', place: 'boston',   val: undefined },\n]\n\n// the same as above using selectors:\ntidy(\n  data,\n  pivotLonger({\n    cols: ['-type'],\n    // ^ the same as: cols: [everything(), '-type']\n    namesTo: 'place',\n    valuesTo: 'val',\n  })\n)\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"const data = [\n  {\n    secval_boston_5: -1,\n    secval_boston_6: -1,\n    secval_brampton_5: -1,\n    secval_brampton_6: 98,\n    type: 'one',\n    val_boston_5: 0,\n    val_boston_6: 0,\n    val_brampton_5: 0,\n    val_brampton_6: 8,\n  },\n  {\n    secval_boston_5: 93,\n    secval_boston_6: -1,\n    secval_brampton_5: 97,\n    secval_brampton_6: -1,\n    type: 'two',\n    val_boston_5: 3,\n    val_boston_6: 0,\n    val_brampton_5: 7,\n    val_brampton_6: 0,\n  },\n];\n\ntidy(\n  data,\n  pivotLonger({\n    cols: ['-type'], // negative selector\n    namesTo: ['place', 'other'],\n    valuesTo: ['val', 'secval'],\n  })\n);\n// output:\n[\n  { type: 'one', place: 'boston',   val: 0, other: '5', secval: -1 },\n  { type: 'one', place: 'boston',   val: 0, other: '6', secval: -1 },\n  { type: 'one', place: 'brampton', val: 0, other: '5', secval: -1 },\n  { type: 'one', place: 'brampton', val: 8, other: '6', secval: 98 },\n  { type: 'two', place: 'boston',   val: 3, other: '5', secval: 93 },\n  { type: 'two', place: 'boston',   val: 0, other: '6', secval: -1 },\n  { type: 'two', place: 'brampton', val: 7, other: '5', secval: 97 },\n  { type: 'two', place: 'brampton', val: 0, other: '6', secval: -1 },\n]\n")),Object(o.b)("hr",null),Object(o.b)("h2",{id:"pivotwider"},"pivotWider"),Object(o.b)("p",null,"Widens data by increasing the number of columns (keys) and decreasing the number of rows (items) in a collection. The inverse transformation is ",Object(o.b)("a",Object(t.a)({parentName:"p"},{href:"#pivotlonger"}),Object(o.b)("strong",{parentName:"a"},"pivotLonger")),"."),Object(o.b)("p",null,"Note this functionality is similar to what is achieved with the tidyr function ",Object(o.b)("a",Object(t.a)({parentName:"p"},{href:"https://tidyr.tidyverse.org/reference/spread.html"}),"spread")," that has been superceded by ",Object(o.b)("a",Object(t.a)({parentName:"p"},{href:"https://tidyr.tidyverse.org/reference/pivot_wider.html"}),"pivot_wider"),"."),Object(o.b)("h3",{id:"parameters-1"},"Parameters"),Object(o.b)("h4",{id:"options-1"},Object(o.b)("inlineCode",{parentName:"h4"},"options")),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-ts"}),"{\n  namesFrom: string | string[], /* keys in the items */\n  namesSep: string = '_';\n  valuesFrom: string | string[]; /* keys in the items */\n  valuesFill: any;\n  valuesFillMap: { [string /* key in item */]: any }\n}\n")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"namesFrom"),": Used in combination with ",Object(o.b)("inlineCode",{parentName:"li"},"valuesFrom")," to get the name of the output key and the value respectively. If ",Object(o.b)("inlineCode",{parentName:"li"},"valuesFrom")," contains multiple values, the value key will be prefixed to the output keys, using ",Object(o.b)("inlineCode",{parentName:"li"},"nameSep"),". "),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"valuesFill"),": any values missing after widening will be filled with this value if specified. Ignored if ",Object(o.b)("inlineCode",{parentName:"li"},"valuesFillMap")," is provided."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"valuesFillMap"),": a map from pre-pivot keys to their default value when a value is not present in the widened item. See also ",Object(o.b)("a",Object(t.a)({parentName:"li"},{href:"/tidy/docs/api/tidy#replacenully"}),Object(o.b)("strong",{parentName:"a"},"replaceNully"))," as a way to set defaults for keys after widening.")),Object(o.b)("h3",{id:"usage-1"},"Usage"),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"const data = [\n  { type: 'one',   place: 'canada',   val: 1 },\n  { type: 'one',   place: 'usa',      val: 10 },\n  { type: 'one',   place: 'campbell', val: 4 },\n  { type: 'one',   place: 'brampton', val: 8 },\n  { type: 'two',   place: 'brampton', val: 7 },\n  { type: 'two',   place: 'boston',   val: 3 },\n  { type: 'two',   place: 'usa',      val: 11 },\n  { type: 'three', place: 'canada',   val: 20 },\n];\n\ntidy(\n  data,\n  pivotWider({\n    namesFrom: 'place',\n    valuesFrom: 'val',\n  })\n);\n// output:\n[\n  { type: 'one', canada: 1, usa: 10, campbell: 4, brampton: 8 },\n  { type: 'two', brampton: 7, boston: 3, usa: 11 },\n  { type: 'three', canada: 20 },\n]\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"const data = [\n  { type: 'one', other: 5, place: 'canada', val: 1, secval: 91 },\n  { type: 'one', other: 5, place: 'usa', val: 10, secval: 910 },\n  { type: 'one', other: 6, place: 'campbell', val: 4, secval: 94 },\n  { type: 'one', other: 6, place: 'brampton', val: 8, secval: 98 },\n  { type: 'two', other: 5, place: 'brampton', val: 7, secval: 97 },\n  { type: 'two', other: 5, place: 'boston', val: 3, secval: 93 },\n  { type: 'two', other: 6, place: 'usa', val: 11, secval: 911 },\n  { type: 'three', other: 5, place: 'canada', val: 20, secval: 920 },\n];\n\nconst results = tidy(\n  data,\n  pivotWider({\n    namesFrom: ['place', 'other'],\n    valuesFrom: ['val', 'secval'],\n    valuesFillMap: { val: 0, secval: -1 },\n  })\n);\n// output:\n[{\n  secval_boston_5: -1,\n  secval_boston_6: -1,\n  secval_brampton_5: -1,\n  secval_brampton_6: 98,\n  secval_campbell_5: -1,\n  secval_campbell_6: 94,\n  secval_canada_5: 91,\n  secval_canada_6: -1,\n  secval_usa_5: 910,\n  secval_usa_6: -1,\n  type: 'one',\n  val_boston_5: 0,\n  val_boston_6: 0,\n  val_brampton_5: 0,\n  val_brampton_6: 8,\n  val_campbell_5: 0,\n  val_campbell_6: 4,\n  val_canada_5: 1,\n  val_canada_6: 0,\n  val_usa_5: 10,\n  val_usa_6: 0,\n},\n{\n  secval_boston_5: 93,\n  secval_boston_6: -1,\n  secval_brampton_5: 97,\n  secval_brampton_6: -1,\n  secval_campbell_5: -1,\n  secval_campbell_6: -1,\n  secval_canada_5: -1,\n  secval_canada_6: -1,\n  secval_usa_5: -1,\n  secval_usa_6: 911,\n  type: 'two',\n  val_boston_5: 3,\n  val_boston_6: 0,\n  val_brampton_5: 7,\n  val_brampton_6: 0,\n  val_campbell_5: 0,\n  val_campbell_6: 0,\n  val_canada_5: 0,\n  val_canada_6: 0,\n  val_usa_5: 0,\n  val_usa_6: 11,\n},\n{\n  secval_boston_5: -1,\n  secval_boston_6: -1,\n  secval_brampton_5: -1,\n  secval_brampton_6: -1,\n  secval_campbell_5: -1,\n  secval_campbell_6: -1,\n  secval_canada_5: 920,\n  secval_canada_6: -1,\n  secval_usa_5: -1,\n  secval_usa_6: -1,\n  type: 'three',\n  val_boston_5: 0,\n  val_boston_6: 0,\n  val_brampton_5: 0,\n  val_brampton_6: 0,\n  val_campbell_5: 0,\n  val_campbell_6: 0,\n  val_canada_5: 20,\n  val_canada_6: 0,\n  val_usa_5: 0,\n  val_usa_6: 0,\n}]\n")))}i.isMDXComponent=!0},97:function(e,a,n){"use strict";n.d(a,"a",(function(){return b})),n.d(a,"b",(function(){return u}));var t=n(0),l=n.n(t);function o(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function c(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){o(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function p(e,a){if(null==e)return{};var n,t,l=function(e,a){if(null==e)return{};var n,t,l={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||(l[n]=e[n]);return l}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=l.a.createContext({}),i=function(e){var a=l.a.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):c(c({},a),e)),n},b=function(e){var a=i(e.components);return l.a.createElement(s.Provider,{value:a},e.children)},v={inlineCode:"code",wrapper:function(e){var a=e.children;return l.a.createElement(l.a.Fragment,{},a)}},m=l.a.forwardRef((function(e,a){var n=e.components,t=e.mdxType,o=e.originalType,r=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),b=i(n),m=t,u=b["".concat(r,".").concat(m)]||b[m]||v[m]||o;return n?l.a.createElement(u,c(c({ref:a},s),{},{components:n})):l.a.createElement(u,c({ref:a},s))}));function u(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var o=n.length,r=new Array(o);r[0]=m;var c={};for(var p in a)hasOwnProperty.call(a,p)&&(c[p]=a[p]);c.originalType=e,c.mdxType="string"==typeof e?e:t,r[1]=c;for(var s=2;s<o;s++)r[s]=n[s];return l.a.createElement.apply(null,r)}return l.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);