(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{65:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return b})),a.d(t,"toc",(function(){return i})),a.d(t,"default",(function(){return s}));var n=a(3),r=a(7),c=(a(0),a(97)),l={title:"Sequence API",sidebar_label:"Sequences"},b={unversionedId:"api/sequences",id:"api/sequences",isDocsHomePage:!1,title:"Sequence API",description:"fullSeq",source:"@site/docs/api/sequences.md",slug:"/api/sequences",permalink:"/tidy/docs/api/sequences",editUrl:"https://github.com/pbeshai/tidy/docs/api/sequences.md",version:"current",lastUpdatedBy:"konsalex",lastUpdatedAt:1618069623,sidebar_label:"Sequences",sidebar:"docs",previous:{title:"Item Function API",permalink:"/tidy/docs/api/item"},next:{title:"Selectors API",permalink:"/tidy/docs/api/selectors"}},i=[{value:"fullSeq",id:"fullseq",children:[{value:"Parameters",id:"parameters",children:[]},{value:"Usage",id:"usage",children:[]}]},{value:"fullSeqDate",id:"fullseqdate",children:[{value:"Parameters",id:"parameters-1",children:[]},{value:"Usage",id:"usage-1",children:[]}]},{value:"fullSeqDateISOString",id:"fullseqdateisostring",children:[{value:"Parameters",id:"parameters-2",children:[]},{value:"Usage",id:"usage-2",children:[]}]}],o={toc:i};function s(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},o,a,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"fullseq"},"fullSeq"),Object(c.b)("p",null,"Creates a full sequence of number values for a key given a set of data. The bounds of the sequence are determined from the existing values within the data. Typically used in combination with ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"#expand"}),Object(c.b)("strong",{parentName:"a"},"expand"))," or ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"#complete"}),Object(c.b)("strong",{parentName:"a"},"complete")),"."),Object(c.b)("h3",{id:"parameters"},"Parameters"),Object(c.b)("h4",{id:"key"},Object(c.b)("inlineCode",{parentName:"h4"},"key")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"| string\n| (item: object) => number\n")),Object(c.b)("p",null,"The key within the data to expand the sequence across."),Object(c.b)("h4",{id:"period"},Object(c.b)("inlineCode",{parentName:"h4"},"period")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"number = 1\n")),Object(c.b)("p",null,"The gap between each value in the data (how much the sequence increments by)."),Object(c.b)("h3",{id:"usage"},"Usage"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const data = [\n  { str: 'foo', value: 3 },\n  { str: 'foo', value: 1 },\n  { str: 'foo', value: 5 },\n  { str: 'foo', value: 10 },\n  { str: 'foo', value: 1 },\n];\n\nfullSeq(data, 'value', 1);\n// output:\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"fullseqdate"},"fullSeqDate"),Object(c.b)("p",null,"Creates a full sequence of date values for a key given a set of data. The bounds of the sequence are determined from the existing values within the data. Typically used in combination with ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"#expand"}),Object(c.b)("strong",{parentName:"a"},"expand"))," or ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"#complete"}),Object(c.b)("strong",{parentName:"a"},"complete")),"."),Object(c.b)("p",null,"Similar to ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"#fullseq"}),Object(c.b)("strong",{parentName:"a"},"fullSeq")),"."),Object(c.b)("h3",{id:"parameters-1"},"Parameters"),Object(c.b)("h4",{id:"key-1"},Object(c.b)("inlineCode",{parentName:"h4"},"key")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"| string\n| (item: object) => Date\n")),Object(c.b)("p",null,"The key within the data to expand the sequence across."),Object(c.b)("h4",{id:"granularity"},Object(c.b)("inlineCode",{parentName:"h4"},"granularity")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"'second' | 'minute' | 'day' | 'week' | 'month' | 'year' = 'day'\n")),Object(c.b)("p",null,"The granularity to increment the data by."),Object(c.b)("h4",{id:"period-1"},Object(c.b)("inlineCode",{parentName:"h4"},"period")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"number = 1\n")),Object(c.b)("p",null,"The gap between each value in the data (how much the sequence increments by)."),Object(c.b)("h3",{id:"usage-1"},"Usage"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const data = [\n  { str: 'foo', date: new Date('2020-04-01') },\n  { str: 'foo', date: new Date('2020-04-02') },\n  { str: 'foo', date: new Date('2020-04-03') },\n  { str: 'foo', date: new Date('2020-04-06') },\n  { str: 'foo', date: new Date('2020-04-08') },\n];\n\nfullSeqDate(data, 'date', 'day', 1)\n// output:\n[\n  new Date('2020-04-01'),\n  new Date('2020-04-02'),\n  new Date('2020-04-03'),\n  new Date('2020-04-04'),\n  new Date('2020-04-05'),\n  new Date('2020-04-06'),\n  new Date('2020-04-07'),\n  new Date('2020-04-08'),\n]\n")),Object(c.b)("hr",null),Object(c.b)("h2",{id:"fullseqdateisostring"},"fullSeqDateISOString"),Object(c.b)("p",null,"Creates a full sequence of date ISO string values for a key given a set of data. The bounds of the sequence are determined from the existing values within the data. Typically used in combination with ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"#expand"}),Object(c.b)("strong",{parentName:"a"},"expand"))," or ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"#complete"}),Object(c.b)("strong",{parentName:"a"},"complete")),"."),Object(c.b)("p",null,"Similar to ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"#fullseq"}),Object(c.b)("strong",{parentName:"a"},"fullSeq")),"."),Object(c.b)("h3",{id:"parameters-2"},"Parameters"),Object(c.b)("h4",{id:"key-2"},Object(c.b)("inlineCode",{parentName:"h4"},"key")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"| string /* key of item */\n| (item: object) => string /* date ISO string */\n")),Object(c.b)("p",null,"The key within the data to expand the sequence across."),Object(c.b)("h4",{id:"granularity-1"},Object(c.b)("inlineCode",{parentName:"h4"},"granularity")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"'second' | 'minute' | 'day' | 'week' | 'month' | 'year' = 'day'\n")),Object(c.b)("p",null,"The granularity to increment the data by."),Object(c.b)("h4",{id:"period-2"},Object(c.b)("inlineCode",{parentName:"h4"},"period")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"number = 1\n")),Object(c.b)("p",null,"The gap between each value in the data (how much the sequence increments by)."),Object(c.b)("h3",{id:"usage-2"},"Usage"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"})," const data = [\n  { str: 'foo', timestamp: '2020-04-01T00:00:00.000Z' },\n  { str: 'foo', timestamp: '2020-04-02T00:00:00.000Z' },\n  { str: 'foo', timestamp: '2020-04-03T00:00:00.000Z' },\n  { str: 'foo', timestamp: '2020-04-06T00:00:00.000Z' },\n  { str: 'foo', timestamp: '2020-04-08T00:00:00.000Z' },\n];\n\nfullSeqDateISOString(data, 'timestamp', 'day', 1)\n// output:\n[\n  '2020-04-01T00:00:00.000Z',\n  '2020-04-02T00:00:00.000Z',\n  '2020-04-03T00:00:00.000Z',\n  '2020-04-04T00:00:00.000Z',\n  '2020-04-05T00:00:00.000Z',\n  '2020-04-06T00:00:00.000Z',\n  '2020-04-07T00:00:00.000Z',\n  '2020-04-08T00:00:00.000Z',\n]\n")))}s.isMDXComponent=!0},97:function(e,t,a){"use strict";a.d(t,"a",(function(){return u})),a.d(t,"b",(function(){return m}));var n=a(0),r=a.n(n);function c(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function b(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){c(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},c=Object.keys(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=r.a.createContext({}),s=function(e){var t=r.a.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):b(b({},t),e)),a},u=function(e){var t=s(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,c=e.originalType,l=e.parentName,o=i(e,["components","mdxType","originalType","parentName"]),u=s(a),d=n,m=u["".concat(l,".").concat(d)]||u[d]||p[d]||c;return a?r.a.createElement(m,b(b({ref:t},o),{},{components:a})):r.a.createElement(m,b({ref:t},o))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=a.length,l=new Array(c);l[0]=d;var b={};for(var i in t)hasOwnProperty.call(t,i)&&(b[i]=t[i]);b.originalType=e,b.mdxType="string"==typeof e?e:n,l[1]=b;for(var o=2;o<c;o++)l[o]=a[o];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);